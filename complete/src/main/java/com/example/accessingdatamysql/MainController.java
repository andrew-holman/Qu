package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestMethod.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String userName, @RequestParam String displayName, @RequestParam String userPassword) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setDisplayName(displayName);
        n.setUserName(userName);
        n.setUserPassword(userPassword);
        userRepository.save(n);
        return "Saved";
    }
    @RequestMapping(path="/user/id", method=RequestMethod.POST, produces = "application/json") // Map ONLY POST Requests
    public @ResponseBody User getUserById(@RequestParam String id) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Integer idInt = Integer.parseInt(id);
        return userRepository.findById(idInt).get();
    }
    @RequestMapping(path="/user/userName", method=RequestMethod.POST, produces = "application/json") // Map ONLY POST Requests
    public @ResponseBody User getUserByUserName(@RequestParam String userName) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        return userRepository.findByUserName(userName).get(0);
    }

    //@ResponseHeaders(Access-Control-Allow-Origin=true)
    @RequestMapping(path="/all", method=RequestMethod.GET, produces = "application/json")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}